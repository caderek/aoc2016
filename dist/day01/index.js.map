{
  "version": 3,
  "sources": ["../../src/day01/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\",\").map((x) => {\n    const trimmed = x.trim()\n    return [trimmed[0], Number(trimmed.slice(1))] as [string, number]\n  })\n\nconst dirs = [\n  { x: 0, y: -1 },\n  { x: 1, y: 0 },\n  { x: 0, y: 1 },\n  { x: -1, y: 0 },\n]\n\nconst mod = (a: number, b: number) => {\n  const x = a % b\n  return x < 0n ? x + b : x\n}\n\nconst solution1 = async (rawInput: string) => {\n  const input = parseInput(rawInput)\n\n  let x = 0\n  let y = 0\n  let dirIndex = 0\n\n  for (const [dir, steps] of input) {\n    dirIndex = mod(dirIndex + (dir === \"R\" ? 1 : -1), dirs.length)\n    x += dirs[dirIndex].x * steps\n    y += dirs[dirIndex].y * steps\n  }\n\n  return Math.abs(x) + Math.abs(y)\n}\n\nconst solution2 = async (rawInput: string) => {\n  const input = parseInput(rawInput)\n\n  let x = 0\n  let y = 0\n  let dirIndex = 0\n  const locations = new Set([\"0,0\"])\n\n  for (const [dir, steps] of input) {\n    dirIndex = mod(dirIndex + (dir === \"R\" ? 1 : -1), dirs.length)\n\n    for (let i = 0; i < steps; i++) {\n      x += dirs[dirIndex].x\n      y += dirs[dirIndex].y\n\n      if (locations.has(`${x},${y}`)) {\n        return Math.abs(x) + Math.abs(y)\n      }\n\n      locations.add(`${x},${y}`)\n    }\n  }\n}\n\nrun({\n  part1: {\n    tests: [\n      { input: `R2, L3`, expected: 5 },\n      { input: `R2, R2, R2`, expected: 2 },\n      { input: `R5, L5, R5, R3`, expected: 12 },\n    ],\n    solution: solution1,\n  },\n  part2: {\n    tests: [{ input: `R8, R4, R4, R8`, expected: 4 }],\n    solution: solution2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,KAAK,IAAI,CAAC,MAAM;AAC7B,QAAM,UAAU,EAAE;AAClB,SAAO,CAAC,QAAQ,IAAI,OAAO,QAAQ,MAAM;AAAA;AAG7C,MAAM,OAAO;AAAA,EACX,EAAE,GAAG,GAAG,GAAG;AAAA,EACX,EAAE,GAAG,GAAG,GAAG;AAAA,EACX,EAAE,GAAG,GAAG,GAAG;AAAA,EACX,EAAE,GAAG,IAAI,GAAG;AAAA;AAGd,MAAM,MAAM,CAAC,GAAW,MAAc;AACpC,QAAM,IAAI,IAAI;AACd,SAAO,IAAI,KAAK,IAAI,IAAI;AAAA;AAG1B,MAAM,YAAY,OAAO,aAAqB;AAC5C,QAAM,QAAQ,WAAW;AAEzB,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,WAAW;AAEf,aAAW,CAAC,KAAK,UAAU,OAAO;AAChC,eAAW,IAAI,WAAY,SAAQ,MAAM,IAAI,KAAK,KAAK;AACvD,SAAK,KAAK,UAAU,IAAI;AACxB,SAAK,KAAK,UAAU,IAAI;AAAA;AAG1B,SAAO,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA;AAGhC,MAAM,YAAY,OAAO,aAAqB;AAC5C,QAAM,QAAQ,WAAW;AAEzB,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,WAAW;AACf,QAAM,YAAY,IAAI,IAAI,CAAC;AAE3B,aAAW,CAAC,KAAK,UAAU,OAAO;AAChC,eAAW,IAAI,WAAY,SAAQ,MAAM,IAAI,KAAK,KAAK;AAEvD,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,WAAK,KAAK,UAAU;AACpB,WAAK,KAAK,UAAU;AAEpB,UAAI,UAAU,IAAI,GAAG,KAAK,MAAM;AAC9B,eAAO,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA;AAGhC,gBAAU,IAAI,GAAG,KAAK;AAAA;AAAA;AAAA;AAK5B,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL,EAAE,OAAO,UAAU,UAAU;AAAA,MAC7B,EAAE,OAAO,cAAc,UAAU;AAAA,MACjC,EAAE,OAAO,kBAAkB,UAAU;AAAA;AAAA,IAEvC,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,kBAAkB,UAAU;AAAA,IAC7C,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
