{
  "version": 3,
  "sources": ["../../src/day05/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\nimport { createHash } from \"node:crypto\"\n\nconst parseInput = (rawInput: string) => rawInput\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n\n  let i = 0\n  const letters = []\n\n  while (letters.length < 8) {\n    const hash = createHash(\"md5\").update(`${input}${i}`).digest(\"hex\")\n\n    if (hash.startsWith(\"00000\")) {\n      letters.push(hash[5])\n    }\n\n    i++\n  }\n\n  return letters.join(\"\")\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n\n  let i = 0\n  const ready = new Set<number>()\n  const letters = []\n\n  while (ready.size < 8) {\n    const hash = createHash(\"md5\").update(`${input}${i}`).digest(\"hex\")\n    const pos = Number(hash[5])\n\n    if (pos >= 0 && pos <= 7 && !ready.has(pos) && hash.startsWith(\"00000\")) {\n      letters[pos] = hash[6]\n      ready.add(pos)\n    }\n\n    i++\n  }\n\n  return letters.join(\"\")\n}\n\nrun({\n  part1: {\n    solution: part1,\n  },\n  part2: {\n    solution: part2,\n  },\n})\n"],
  "mappings": "AAAA,OAAO,SAAS;AAChB,SAAS,kBAAkB;AAE3B,MAAM,aAAa,CAAC,aAAqB;AAEzC,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AAEjC,MAAI,IAAI;AACR,QAAM,UAAU,CAAC;AAEjB,SAAO,QAAQ,SAAS,GAAG;AACzB,UAAM,OAAO,WAAW,KAAK,EAAE,OAAO,GAAG,QAAQ,GAAG,EAAE,OAAO,KAAK;AAElE,QAAI,KAAK,WAAW,OAAO,GAAG;AAC5B,cAAQ,KAAK,KAAK,EAAE;AAAA,IACtB;AAEA;AAAA,EACF;AAEA,SAAO,QAAQ,KAAK,EAAE;AACxB;AAEA,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AAEjC,MAAI,IAAI;AACR,QAAM,QAAQ,oBAAI,IAAY;AAC9B,QAAM,UAAU,CAAC;AAEjB,SAAO,MAAM,OAAO,GAAG;AACrB,UAAM,OAAO,WAAW,KAAK,EAAE,OAAO,GAAG,QAAQ,GAAG,EAAE,OAAO,KAAK;AAClE,UAAM,MAAM,OAAO,KAAK,EAAE;AAE1B,QAAI,OAAO,KAAK,OAAO,KAAK,CAAC,MAAM,IAAI,GAAG,KAAK,KAAK,WAAW,OAAO,GAAG;AACvE,cAAQ,OAAO,KAAK;AACpB,YAAM,IAAI,GAAG;AAAA,IACf;AAEA;AAAA,EACF;AAEA,SAAO,QAAQ,KAAK,EAAE;AACxB;AAEA,IAAI;AAAA,EACF,OAAO;AAAA,IACL,UAAU;AAAA,EACZ;AAAA,EACA,OAAO;AAAA,IACL,UAAU;AAAA,EACZ;AACF,CAAC;",
  "names": []
}
