{
  "version": 3,
  "sources": ["../../src/day06/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) => rawInput.split(\"\\n\")\n\nconst solve = (compareFn: (a: any, b: any) => number) => (rawInput: string) => {\n  const input = parseInput(rawInput)\n\n  const occurrences = Array.from(\n    { length: input[0].length },\n    () => new Map<string, number>(),\n  )\n\n  for (const line of input) {\n    for (let i = 0; i < line.length; i++) {\n      occurrences[i].set(line[i], (occurrences[i].get(line[i]) ?? 0) + 1)\n    }\n  }\n\n  return occurrences.map((v) => Array.from(v).sort(compareFn)[0][0]).join(\"\")\n}\n\nconst testInput = `\n  eedadn\n  drvtee\n  eandsr\n  raavrd\n  atevrs\n  tsrnev\n  sdttsa\n  rasrtv\n  nssdts\n  ntnada\n  svetve\n  tesnvt\n  vntsnd\n  vrdear\n  dvrsen\n  enarar\n`\n\nrun({\n  part1: {\n    tests: [{ input: testInput, expected: \"easter\" }],\n    solution: solve((a, b) => b[1] - a[1]),\n  },\n  part2: {\n    tests: [{ input: testInput, expected: \"advent\" }],\n    solution: solve((a, b) => a[1] - b[1]),\n  },\n})\n"],
  "mappings": "AAAA,OAAO,SAAS;AAEhB,MAAM,aAAa,CAAC,aAAqB,SAAS,MAAM,IAAI;AAE5D,MAAM,QAAQ,CAAC,cAA0C,CAAC,aAAqB;AAC7E,QAAM,QAAQ,WAAW,QAAQ;AAEjC,QAAM,cAAc,MAAM;AAAA,IACxB,EAAE,QAAQ,MAAM,GAAG,OAAO;AAAA,IAC1B,MAAM,oBAAI,IAAoB;AAAA,EAChC;AAEA,aAAW,QAAQ,OAAO;AACxB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,kBAAY,GAAG,IAAI,KAAK,KAAK,YAAY,GAAG,IAAI,KAAK,EAAE,KAAK,KAAK,CAAC;AAAA,IACpE;AAAA,EACF;AAEA,SAAO,YAAY,IAAI,CAAC,MAAM,MAAM,KAAK,CAAC,EAAE,KAAK,SAAS,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE;AAC5E;AAEA,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBlB,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,WAAW,UAAU,SAAS,CAAC;AAAA,IAChD,UAAU,MAAM,CAAC,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE;AAAA,EACvC;AAAA,EACA,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,WAAW,UAAU,SAAS,CAAC;AAAA,IAChD,UAAU,MAAM,CAAC,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE;AAAA,EACvC;AACF,CAAC;",
  "names": []
}
