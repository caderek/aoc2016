{
  "version": 3,
  "sources": ["../../src/day07/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((line) => {\n    const chunks = line.match(/[a-z]+/g) ?? []\n\n    const supernet = []\n    const hypernet = []\n\n    for (const [index, val] of chunks?.entries()) {\n      if (index % 2 === 0) {\n        supernet.push(val)\n      } else {\n        hypernet.push(val)\n      }\n    }\n\n    return { supernet, hypernet }\n  })\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const ABBA_REGEX = /([a-z])((?!\\1)[a-z])\\2\\1/g\n\n  return input.filter(({ supernet, hypernet }) => {\n    const matchingSuper = supernet.map((v) => v.match(ABBA_REGEX) ?? []).flat()\n    const matchingHyper = hypernet.map((v) => v.match(ABBA_REGEX) ?? []).flat()\n\n    return matchingSuper.length > 0 && matchingHyper.length === 0\n  }).length\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const ABA_REGEX = /(?=(([a-z])((?!\\2)[a-z])\\2))/g\n\n  return input.filter(({ supernet, hypernet }) => {\n    const matchingSuper = supernet\n      .map((v) => [...v.matchAll(ABA_REGEX)].map((v) => v[1]))\n      .flat()\n    const matchingHyper = hypernet\n      .map((v) => [...v.matchAll(ABA_REGEX)].map((v) => v[1]))\n      .flat()\n\n    return matchingSuper.some((v) =>\n      matchingHyper.includes(`${v[1]}${v[0]}${v[1]}`),\n    )\n  }).length\n}\n\nconst testInput = `\nabba[mnop]qrst\nabcd[bddb]xyyx\naaaa[qwer]tyui\nioxxoj[asdfgh]zxcvbn\n`\n\nconst testInput2 = `\naba[bab]xyz\nxyx[xyx]xyx\naaa[kek]eke\nzazbz[bzb]cdb\n`\n\nrun({\n  part1: {\n    tests: [{ input: testInput, expected: 2 }],\n    solution: part1,\n  },\n  part2: {\n    tests: [{ input: testInput2, expected: 3 }],\n    solution: part2,\n  },\n})\n"],
  "mappings": "AAAA,OAAO,SAAS;AAEhB,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,IAAI,EAAE,IAAI,CAAC,SAAS;AACjC,QAAM,SAAS,KAAK,MAAM,SAAS,KAAK,CAAC;AAEzC,QAAM,WAAW,CAAC;AAClB,QAAM,WAAW,CAAC;AAElB,aAAW,CAAC,OAAO,GAAG,KAAK,iCAAQ,WAAW;AAC5C,QAAI,QAAQ,MAAM,GAAG;AACnB,eAAS,KAAK,GAAG;AAAA,IACnB,OAAO;AACL,eAAS,KAAK,GAAG;AAAA,IACnB;AAAA,EACF;AAEA,SAAO,EAAE,UAAU,SAAS;AAC9B,CAAC;AAEH,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AACjC,QAAM,aAAa;AAEnB,SAAO,MAAM,OAAO,CAAC,EAAE,UAAU,SAAS,MAAM;AAC9C,UAAM,gBAAgB,SAAS,IAAI,CAAC,MAAM,EAAE,MAAM,UAAU,KAAK,CAAC,CAAC,EAAE,KAAK;AAC1E,UAAM,gBAAgB,SAAS,IAAI,CAAC,MAAM,EAAE,MAAM,UAAU,KAAK,CAAC,CAAC,EAAE,KAAK;AAE1E,WAAO,cAAc,SAAS,KAAK,cAAc,WAAW;AAAA,EAC9D,CAAC,EAAE;AACL;AAEA,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW,QAAQ;AACjC,QAAM,YAAY;AAElB,SAAO,MAAM,OAAO,CAAC,EAAE,UAAU,SAAS,MAAM;AAC9C,UAAM,gBAAgB,SACnB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,SAAS,CAAC,EAAE,IAAI,CAACA,OAAMA,GAAE,EAAE,CAAC,EACtD,KAAK;AACR,UAAM,gBAAgB,SACnB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,SAAS,CAAC,EAAE,IAAI,CAACA,OAAMA,GAAE,EAAE,CAAC,EACtD,KAAK;AAER,WAAO,cAAc;AAAA,MAAK,CAAC,MACzB,cAAc,SAAS,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI;AAAA,IAChD;AAAA,EACF,CAAC,EAAE;AACL;AAEA,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlB,MAAM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnB,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,WAAW,UAAU,EAAE,CAAC;AAAA,IACzC,UAAU;AAAA,EACZ;AAAA,EACA,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,YAAY,UAAU,EAAE,CAAC;AAAA,IAC1C,UAAU;AAAA,EACZ;AACF,CAAC;",
  "names": ["v"]
}
